// Add dependencies
const express = require('express');
const fs = require('fs');
const uniqid = require('uniqid');
const path = require('path');
const app = express();

// Add middleware
app.use(express.urlencoded({extended: true}));
app.use(express.json());

// Used to serve static pages like the CSS stylesheet or the JS script document for notes.html
// Static means not being dynamically generated by server-side code
app.use(express.static(__dirname + '/public/assets'));

// Set the port
const PORT = process.env.PORT || 8080;

// Declare routes for API

// // Test the route
// router.get('/', (req, res) => {
//     res.json({ message: 'Success!' });
// });

// Gets the index.html file 
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname + '/public/index.html'))
});

// Gets the notes.html file
app.get('/notes', (req, res) => {
    res.sendFile(path.join(__dirname + '/public/notes.html'))
});

// Gets the api route for notes (db.json)
app.get('/api/notes', (req, res) => {
    res.sendFile(path.join(__dirname + '/db/db.json'))
});

// Post a new note to the api
// Posting to the api (db.json)
app.post('/api/notes',  (req, res) => {
    // The value of the note will be the request body, i.e. the user's input into the notes.html page
    const addNote = req.body;
    // Assign a unique id to each new note
    addNote.id = uniqid();
    console.log(addNote);
    // A variable initialised wiht the db.json file
    // i.e. a variable that contains all existing notes in an array or JSON objects
    const oldNotes = require('./db/db.json');
    // Push the new note to the oldNotes variable
    // Simply adding new notes to the oldNotes array, not yet permanently writing to the db.json file
    oldNotes.push(addNote);
    console.log(oldNotes);
    // A variable initialised by the value of oldNotes that's been JSON.stringified
    // Parameters: null = all properties of object are present in JSON string, 5 = added whitespace for readability
    const addToDatabase = JSON.stringify(oldNotes, null, 5);
    updateDatabase(addToDatabase);
});

updateDatabase = (note) => {
    fs.writeFile('./db/db.json', note, (err) => {
        if (err) throw err;
        console.log('Added note');
    })
}

// Starting the server
app.listen(PORT, () => console.log(`Listening on http://localhost:${PORT}`));